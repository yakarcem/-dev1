/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Deploy_heroku;
import static spark.Spark.get;
 import static spark.Spark.port;
 import static spark.Spark.post;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
 import spark.ModelAndView;
 import spark.template.mustache.MustacheTemplateEngine;


 public class App
 {
 public String getGreeting() {
 return "Hello world.";
 }
 //Burada fonksiyonumuzu oluşturduk ve fonksiyonumuz boş değer aldığında false olarak dönüyor
 public static boolean Gelir_Gider(ArrayList<Integer> array, int maas,int kira,int hisse) {
  boolean sonuc;
  int a = 0;
   for(int d : array){
       a += d;
   }
  if(!array.isEmpty() && maas>=0 && kira>=0 && hisse>=0 && a>=0){
      sonuc=true;        
     }else{
         sonuc=false;
     } 
     return sonuc;
 }
 public static void main(String[] args) {
 port(getHerokuAssignedPort());
//Burası Proje ilk açıldığında açılan sayfa yazan bilgi
 get("/", (req, res) -> "Merhabalar Hoşgeldiniz Gelir Gider Hesaplamak için linke compute ekleyiniz..");
 //Post kısmımız burası ve gönderilen veriler post metodu ile fonksiyonumuza gönderiliyor ve result olarak sayfaya bilgi veriyor
 post("/compute", (req, res) -> {
 String input1 = req.queryParams("input1");
 java.util.Scanner sc1 = new java.util.Scanner(input1);
 sc1.useDelimiter("[;\r\n]+");
 java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
 while (sc1.hasNext())
 {
 int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
 inputList.add(value);
 }
 sc1.close();
 String input2 = req.queryParams("input2").replaceAll("\\s","");
 int input2AsInt = Integer.parseInt(input2);
 String input3 = req.queryParams("input3").replaceAll("\\s","");
 int input3AsInt = Integer.parseInt(input3);
 String input4 = req.queryParams("input4").replaceAll("\\s","");
 int input4AsInt = Integer.parseInt(input4);
 boolean result = App.Gelir_Gider(inputList, input2AsInt,input3AsInt,input4AsInt);
 Map<String, String> map = new HashMap<String, String>();
   int gider_toplam = 0;
   for(int d : inputList){
       gider_toplam += d;
   }
   int gelir_toplam_input=input2AsInt+input3AsInt+input4AsInt;
   if(result == true){
        map.put("result", "Kalan Para: "+(gelir_toplam_input-gider_toplam)+"");
   }else{
        map.put("result", "Eksik Veri Girdiniz");
   }
 return new ModelAndView(map, "compute.mustache");
 }, new MustacheTemplateEngine());
//Formun açılması için get metodu oluşturuldu.
 get("/compute",
 (rq, rs) -> {
 Map<String, String> map = new HashMap<String, String>();
 map.put("result", "not computed yet!");
 return new ModelAndView(map, "compute.mustache");
 },
 new MustacheTemplateEngine());
 }
 static int getHerokuAssignedPort() {
 ProcessBuilder processBuilder = new ProcessBuilder();
 if (processBuilder.environment().get("PORT") != null) {
 return Integer.parseInt(processBuilder.environment().get("PORT"));
 }
 return 4567; //Proje Localde çalışırken bur port kullanılacak
 }
}
